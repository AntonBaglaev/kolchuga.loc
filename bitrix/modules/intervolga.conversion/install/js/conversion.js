// Generated by CoffeeScript 1.9.1
(function() {
  var bindReady, captureBXAjax, captureJQueryAjax, checkBasket, checkOrder, checkOrderInner, doOnYaCounter, getBXCookiePrefix, getCookie, getYaCounter, i, len, method, methods, noop, onReady, readyList, setCookie, yaCounter, yaCounterHandlers;

  noop = function() {};

  methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];

  if (this.console == null) {
    try {
      this.console = {};
    } catch (_error) {

    }
  }

  for (i = 0, len = methods.length; i < len; i++) {
    method = methods[i];
    try {
      if (this.console[method] == null) {
        this.console[method] = noop;
      }
    } catch (_error) {

    }
  }

  bindReady = function(handler) {
    var called, ready, tryScroll;
    called = false;
    ready = function() {
      if (called) {
        return;
      }
      called = true;
      return handler();
    };
    if (document.addEventListener) {
      document.addEventListener("DOMContentLoaded", function() {
        return ready();
      }, false);
    } else if (document.attachEvent) {
      if (document.documentElement.doScroll && this === this.top) {
        tryScroll = function() {
          var e;
          if (called) {
            return;
          }
          if (!document.body) {
            return;
          }
          try {
            document.documentElement.doScroll("left");
            return ready();
          } catch (_error) {
            e = _error;
            return setTimeout(tryScroll, 0);
          }
        };
        tryScroll();
      }
      document.attachEvent("onreadystatechange", function() {
        if (document.readyState === "complete") {
          return ready();
        }
      });
    }
    if (this.addEventListener) {
      return this.addEventListener('load', ready, false);
    } else if (this.attachEvent) {
      return this.attachEvent('onload', ready);
    }
  };

  readyList = [];

  onReady = function(handler) {
    if (!readyList.length) {
      bindReady(function() {
        var j, len1, readyHandler, results;
        results = [];
        for (j = 0, len1 = readyList.length; j < len1; j++) {
          readyHandler = readyList[j];
          results.push(readyHandler());
        }
        return results;
      });
    }
    return readyList.push(handler);
  };

  yaCounter = null;

  getYaCounter = function() {
    var name, yaTitle;
    if (yaCounter == null) {
      yaTitle = ((function() {
        var results;
        results = [];
        for (name in this) {
          if (name.search('yaCounter') !== -1) {
            results.push(name);
          }
        }
        return results;
      }).call(this))[0];
      if (yaTitle != null) {
        console.debug("Ya counter found: " + yaTitle);
        yaCounter = this[yaTitle];
      } else {
        console.debug("Ya counter not found");
        yaCounter = null;
      }
    }
    return yaCounter;
  };

  yaCounterHandlers = [];

  doOnYaCounter = function(handler) {
    var doOnYaCounterWaitable, j, len1, readyHandler, yaC;
    yaCounterHandlers.push(handler);
    if (yaC = getYaCounter()) {
      for (j = 0, len1 = yaCounterHandlers.length; j < len1; j++) {
        readyHandler = yaCounterHandlers[j];
        readyHandler(yaC);
      }
      return yaCounterHandlers = [];
    } else if (this.yandex_metrika_callbacks) {
      console.debug("Not found ready YaCounter, trying to wait it for");
      doOnYaCounterWaitable = function() {
        var k, len2;
        if (yaC = getYaCounter()) {
          for (k = 0, len2 = yaCounterHandlers.length; k < len2; k++) {
            readyHandler = yaCounterHandlers[k];
            readyHandler(yaC);
          }
          return yaCounterHandlers = [];
        } else {
          return setTimeout(doOnYaCounterWaitable, 2000);
        }
      };
      return setTimeout(doOnYaCounterWaitable, 2000);
    } else {
      return console.debug("Ya counter is not installed");
    }
  };

  getBXCookiePrefix = function() {
    var ref;
    return ((ref = this.BX || top.BX) != null ? typeof ref.message === "function" ? ref.message('COOKIE_PREFIX') : void 0 : void 0) || 'BITRIX_SM';
  };

  getCookie = function(name) {
    var bxname, matches;
    bxname = getBXCookiePrefix() + '_' + name;
    matches = document.cookie.match(new RegExp("(?:^|; )" + bxname.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
    if (matches) {
      return decodeURIComponent(matches[1].toString().split('+').join(' '));
    } else {
      return null;
    }
  };

  setCookie = function(name, value, options) {
    var bxname, d, expires, propName, propValue, updatedCookie;
    bxname = getBXCookiePrefix() + '_' + name;
    options = options || {};
    expires = options.expires;
    if (typeof expires === "number" && expires) {
      d = new Date;
      d.setTime(d.getTime() + expires * 1000);
      expires = options.expires = d;
    }
    if (expires && expires.toUTCString) {
      options.expires = expires.toUTCString();
    }
    value = encodeURIComponent(value.toString().split(' ').join('+'));
    updatedCookie = bxname + "=" + value;
    for (propName in options) {
      updatedCookie += "; " + propName;
      propValue = options[propName];
      if (propValue !== true) {
        updatedCookie += "=" + propValue;
      }
    }
    return document.cookie = updatedCookie;
  };

  checkBasket = function() {
    var basketCookie, e;
    try {
      basketCookie = getCookie('BASKET_ADDED_G');
      if (basketCookie === 'Y') {
        console.debug("Found cookie BASKET_ADDED_G");
        if (this.ga != null) {
          this.ga('send', 'event', 'conversion', 'GOAL_ADD2BASKET');
          this.ga('send', 'pageview', '/conversion-pages/add2basket/');
          console.debug("Sended goal GOAL_ADD2BASKET and hit '/conversion-pages/add2basket/' to GA");
        } else if (this._gaq != null) {
          this._gaq.push(['_trackEvent', 'conversion', 'GOAL_ADD2BASKET']);
          this._gaq.push(['_trackPageview', '/conversion-pages/add2basket/']);
          console.debug("Sended goal GOAL_ADD2BASKET and hit '/conversion-pages/add2basket/' to GAQ");
        } else {
          console.debug("Not found ready GA/GAQ counter");
        }
        console.debug("Handled cookie BASKET_ADDED_G");
        setCookie('BASKET_ADDED_G', 'N', {
          'path': '/',
          'expires': 1
        });
        console.debug("Removed cookie BASKET_ADDED_G");
      }
    } catch (_error) {
      e = _error;
      console.debug(e);
    }
    try {
      basketCookie = getCookie('BASKET_ADDED_Y');
      if (basketCookie === 'Y') {
        console.debug("Found cookie BASKET_ADDED_Y");
        return doOnYaCounter(function(yaCounter) {
          yaCounter.reachGoal('GOAL_ADD2BASKET');
          yaCounter.hit('/conversion-pages/add2basket/');
          console.debug("Sended goal GOAL_ADD2BASKET and hit '/conversion-pages/add2basket/' to YA");
          console.debug("Handled cookie BASKET_ADDED_Y");
          setCookie('BASKET_ADDED_Y', 'N', {
            'path': '/',
            'expires': 1
          });
          return console.debug("Removed cookie BASKET_ADDED_Y");
        });
      }
    } catch (_error) {
      e = _error;
      return console.debug(e);
    }
  };

  checkOrder = function() {
    var e, orderCookie, orderID;
    try {
      orderCookie = getCookie('ORDER_ADDED_G');
      if (orderCookie == null) {
        orderCookie = '';
      }
      orderID = orderCookie;
      if (orderID.length === 0) {
        orderCookie = getCookie('ORDER_ADDED_Y');
        if (orderCookie == null) {
          orderCookie = 0;
        }
        orderID = orderCookie;
      }
      if (orderID.length > 0) {
        if (this.eshopOrder != null) {
          console.debug("Found order data");
          return checkOrderInner();
        } else {
          console.debug("Not found order data");
          if (this.jQuery != null) {
            console.debug("Loading order data via jQuery");
            return this.jQuery.getScript('/bitrix/admin/intervolga.conversion_order.php');
          } else if ((this.BX != null) && (this.BX.ajax != null)) {
            console.debug("Loading order data via BX");
            return this.BX.ajax.loadScriptAjax('/bitrix/admin/intervolga.conversion_order.php');
          } else {
            return console.debug("Cant load order data: jQuery or BX are not present");
          }
        }
      }
    } catch (_error) {
      e = _error;
      return console.debug(e);
    }
  };

  checkOrderInner = function() {
    var e, item, j, k, len1, len2, order, orderCookie, orderID, ref, ref1;
    try {
      orderCookie = getCookie('ORDER_ADDED_G');
      if (orderCookie == null) {
        orderCookie = 0;
      }
      orderID = orderCookie;
      if (orderID.length > 0 && (this.eshopOrder != null) && this.eshopOrder.id.toString() === orderCookie) {
        order = this.eshopOrder;
        console.debug("Found cookie ORDER_ADDED_G");
        if (this.ga != null) {
          this.ga('require', 'ecommerce', 'ecommerce.js');
          this.ga('ecommerce:addTransaction', {
            'id': order.id,
            'affiliation': order.affiliation,
            'revenue': order.revenue,
            'shipping': order.shipping,
            'tax': order.tax,
            'currency': order.currency
          });
          ref = order.items;
          for (j = 0, len1 = ref.length; j < len1; j++) {
            item = ref[j];
            this.ga('ecommerce:addItem', {
              'id': order.id,
              'name': item.name,
              'sku': item.id,
              'category': item.category,
              'price': item.price,
              'quantity': item.quantity,
              'currency': item.currency
            });
          }
          this.ga('ecommerce:send');
          console.debug("Sended order data to GA");
          this.ga('send', 'event', 'conversion', 'GOAL_MAKEORDER');
          this.ga('send', 'pageview', '/conversion-pages/makeorder/');
          console.debug("Sended goal GOAL_MAKEORDER and hit '/conversion-pages/makeorder/' to GA");
        } else if (this._gaq) {
          this._gaq.push(['_addTrans', order.id, order.affiliation, order.revenue, order.tax, order.shipping, order.city, order.state, order.country]);
          ref1 = order.items;
          for (k = 0, len2 = ref1.length; k < len2; k++) {
            item = ref1[k];
            this._gaq.push(['_addItem', order.id, item.id, item.name, item.category, item.price, item.quantity]);
          }
          this._gaq.push(['_set', 'currencyCode', order.currency]);
          this._gaq.push(['_trackTrans']);
          console.debug("Sended order data to GAQ");
          this._gaq.push(['_trackEvent', 'conversion', 'GOAL_MAKEORDER']);
          this._gaq.push(['_trackPageview', '/conversion-pages/makeorder/']);
          console.debug("Sended goal GOAL_MAKEORDER and hit '/conversion-pages/makeorder/' to GAQ");
        } else {
          console.debug("Not found ready GA/GAQ counter");
        }
        console.debug("Handled cookie ORDER_ADDED_G");
        setCookie('ORDER_ADDED_G', 0, {
          'path': '/',
          'expires': 1
        });
        console.debug("Removed cookie ORDER_ADDED_G");
      }
    } catch (_error) {
      e = _error;
      console.debug(e);
    }
    try {
      orderCookie = getCookie('ORDER_ADDED_Y');
      if (orderCookie == null) {
        orderCookie = 0;
      }
      orderID = orderCookie;
      if (orderID.length > 0) {
        return doOnYaCounter(function(yaCounter) {
          var l, len3, ref2, yaParams;
          orderCookie = getCookie('ORDER_ADDED_Y');
          if (orderCookie == null) {
            orderCookie = 0;
          }
          orderID = orderCookie;
          if (orderID.length > 0 && (this.eshopOrder != null) && this.eshopOrder.id.toString() === orderCookie) {
            order = this.eshopOrder;
            console.debug("Found cookie ORDER_ADDED_Y");
            yaParams = {};
            yaParams.order_id = order.id;
            yaParams.order_price = order.revenue;
            yaParams.currency = order.currency === "RUB" ? "RUR" : order.currency;
            yaParams.exchange_rate = 1;
            yaParams.goods = [];
            ref2 = order.items;
            for (l = 0, len3 = ref2.length; l < len3; l++) {
              item = ref2[l];
              yaParams.goods.push({
                id: item.id,
                name: item.name,
                price: item.price,
                quantity: item.quantity
              });
            }
            yaCounter.reachGoal('GOAL_MAKEORDER', yaParams);
            console.debug("Sended order data and goal GOAL_MAKEORDER to YA");
            yaCounter.hit('/conversion-pages/makeorder/');
            console.debug("Sended hit '/conversion-pages/makeorder/' to YA");
            console.debug("Handled cookie ORDER_ADDED_Y");
            setCookie('ORDER_ADDED_Y', 0, {
              'path': '/',
              'expires': 1
            });
            return console.debug("Removed cookie ORDER_ADDED_Y");
          }
        });
      }
    } catch (_error) {
      e = _error;
      return console.debug(e);
    }
  };

  captureJQueryAjax = function() {
    var e;
    try {
      if (this.jQuery != null) {
        return $(document).ajaxSuccess((function(_this) {
          return function(e, jqXHR, config) {
            if (config != null) {
              console.debug("Catch jQuery succes request: " + config.url);
              checkBasket();
              return checkOrder();
            }
          };
        })(this));
      }
    } catch (_error) {
      e = _error;
      return console.debug(e);
    }
  };

  captureBXAjax = function() {
    var e;
    try {
      if (this.BX != null) {
        return BX.addCustomEvent('onAjaxSuccess', function(data, config) {
          if (config != null) {
            console.debug("Catch BX succes request: " + config.url);
            checkBasket();
            return checkOrder();
          }
        });
      }
    } catch (_error) {
      e = _error;
      return console.debug(e);
    }
  };

  onReady(checkBasket);

  onReady(checkOrder);

  onReady(captureJQueryAjax);

  onReady(captureBXAjax);

}).call(this);
